// this file contains the component for login form 
import React,{PropTypes} from 'react';
import './loginContainer.scss'
import Paper from 'material-ui/Paper';
import TextField from 'material-ui/TextField';
import RaisedButton from 'material-ui/RaisedButton';

//to create login action 
import * as loginAction from  '../modules/loginAction'
import mui from 'material-ui';
import { browserHistory } from 'react-router';


//update login page component work with redux so importing connect function
import { connect } from 'react-redux';


 class LoginDetails extends React.Component {

   //constructor where assigning the default value for the property, initialize the event
   constructor(props,context) {
        super(props,context);

        //setting the local state
        //user is the object and userName and password are properties
        this.state ={
          user: {userName: "", password:"", isLogedin: false, usernameError_text: "",  passwordError_text: ""}
        };

          //binding the statement for all functions   
          this.userNameChange = this.userNameChange.bind(this);
          this.passwordChange = this.passwordChange.bind(this);
          this.createLogin = this.createLogin.bind(this);
          //this.validateForm = this.validateForm.bind(this);
    }

    //userNameChange is the function where state is updated every time key is pressed at userName input field
    userNameChange(event) {
      const user = this.state.user;
      user.userName = event.target.value;

      //update the state
      this.setState({user: user})
    }

    // userNameChange is the function where state is updated every time key is pressed at password input field
    passwordChange(event) {
      const user = this.state.user;
      user.password = event.target.value;
        this.setState({user: user})
    }
       
    //createLogin is the function it is called on click on login button
    createLogin()
    {
        //validating the user input
        var isFormValid = true;

         const user = this.state.user;
         if(user.userName== "" )
         {
           user.userNameerror_text ="Username is required";
           isFormValid = false;
         }
         else
            user.userNameerror_text ="";

         if(user.password== "" )
         {
           user.passwordError_text ="Password is required";
           isFormValid = false;
         }
         else
           user.passwordError_text ="";

         this.setState({user: user})
      
         if(isFormValid == true)
         {
            this.props.createLogin(this.state.user);
            //this.context.router.transitionTo(payload.route);
            browserHistory.push("/requisitionList");


         }else
         {
            return false;
         }
    }

render(){
  return(
    <div className="login">
        <Paper zDepth={2} className="login-paper">
          <h4 className="login__heading">Login</h4>
          <div className="login__content">
            <TextField name="txtName" errorText={this.state.user.userNameerror_text} hintText="User Name" value={this.state.user.userName} floatingLabelText="User Name" fullWidth={true} onChange={this.userNameChange} />
          </div>
          <div className="login__content">
             <TextField hintText="Password " errorText={this.state.user.passwordError_text} value={this.state.user.password}  floatingLabelText="Password" type="password" fullWidth={true} onChange={this.passwordChange}/>
           </div>
          <div className="login__btn">
            <RaisedButton label="Login" onTouchTap={this.createLogin}  primary={true} fullWidth={true} />
          </div>
        </Paper>
      </div>
    );
  }
}

//----------------------------------------------
//container component
//----------------------------------------------

//this function takes two parameters state & ownProps.
//state is represent state in redux  store
//ownProps let's to access the parameters attached to this component
function mapStateToProps(state, ownProps)
{
  //inside the function define a object that return properties like to expose on our component  
  return {
    reducerUser: state.login
  };
}


//this function is to deciding g what action to expose on this component 
//dispatch is the function that allow to fire of the action
// in mapDispatchToProps function dispatch createLogin action
function mapDispatchToProps(dispatch)
{
  return{
    createLogin:login=> dispatch(loginAction.createLogin(login))
  };
}

//connect function is used to create component that can interact with redux
//both parameters are functions
export default connect(mapStateToProps,mapDispatchToProps)(LoginDetails)
