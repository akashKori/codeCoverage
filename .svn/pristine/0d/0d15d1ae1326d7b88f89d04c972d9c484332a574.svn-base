import React from 'react';
import { TableRowProps, Table, TableBody, TableFooter, PagiFooter, TableHeader, TableHeaderColumn, TableRow, TableRowColumn } from 'material-ui/Table';
import UltimatePagination from './UltimatePagination'
import SelectField from 'material-ui/SelectField';
import MenuItem from 'material-ui/MenuItem';
import AttachementIcon from '../../assets/attachments.png';
import CriticalIcon from '../../assets/critical.png';
import NotesIcon from '../../assets/notes.png';
import LabReviewIcon from '../../assets/lab-review.png';
import NotificationIcon from '../../assets/notifications.png';
import TestPreviewIcon from '../../assets/test-preview.png';
import TestPreviewActiveIcon from '../../assets/test-preview-active.png';
import './Requisition.scss';
import CircularProgress from 'material-ui/CircularProgress';
import RequisitionAction from '../modules/requisition';

//update login page component work with redux so importing connect function
import { connect } from 'react-redux';

// properties of TableHeader component
let headerProps = {
  enableSelectAll: false,
  displaySelectAll: false,
  adjustForCheckbox: false
};


// our table hader information, key is the name of the 
// property to sort by when the header is clicked 
let headers = [
  { name: "Accession#", key: "VisitSequenceId" },
  { name: "Visit Date", key: "VisitDate" },
  { name: "Visit Time", key: "VisitTime" },
  { name: "PSC Location", key: "PSCLocation" },
  { name: "Patient Name", key: "PatientName" },
  { name: "Gender", key: "PatientSex" },
  { name: "DOB", key: "PatientDOB" },
  { name: "Physician", key: "PhysicianName" },
  { name: "Physician Location", key: "PhysicianLocation" },
  { name: "Status", key: "VisitStatus" },
  { name: "NotesIcon", key: " " },
  { name: "AttachementIcon", key: " " },
  { name: "NotificationIcon", key: " " },
  { name: "CriticalIcon", key: " " },
  { name: "LabReviewIcon", key: " " },
];

/*This component we are going to render on ui to display the list of requisition items.
  Here we are using state variable like sortBy and sortDir .These things we are going to pass API call.
*/

class Requisition extends React.Component {
  constructor(props) {
    super(props);

    this.state = { sortBy: 'VisitSequenceId', sortDir: 'ASC', pageSize:5, page: 1, totalPages: 0, visitid: '' };
    //This is the code for to bind the methods...
    this.onPageChange = this.onPageChange.bind(this);
    this.handleChange = this.handleChange.bind(this);
    this.openRequisitionDetail=this.openRequisitionDetail.bind(this);
  }
//used to open the requistion detail page
 openRequisitionDetail(visitId,patientName,visitSequenceId){
  //this.props.getVisitDetails(visitId)
  var windowTittle=patientName +"("+visitSequenceId+")"
  var win = window.open('./requisition?key='+visitId,'_blank');
  //win.onload = function() { this.document.title = windowTittle; }
  win.focus();
}

  //This method is component life cycle first method.Which is helpful to populate page load data here...
  componentWillMount() {
    if (this.props.requisitionList.length > 0) {


      //This property function we are making action redux and send api call.
      this.props.updateSortBy(this.state.sortBy, this.state.sortDir, this.state.page, this.state.pageSize);
      //Caluculate the total no of records of requisition list..
      let totalNoOfRecords = this.state.totalCount;
      this.setState({ totalPages: Math.ceil(totalNoOfRecords / this.state.pageSize) });

    }

  }

  //This "renderHeaders" help to us to render specific 'SortableHeader' component display on table.
  renderHeaders() {
    let header = headers.map((h) => {


      return <SortableHeader
        key={h.key}
        name={h.name}
        onClicked={() => this.updateSortBy(h.key)}
        isSortColumn={this.state.sortBy == h.key}>   </SortableHeader>


    });
    return <TableRow>{header}</TableRow>;
  }


  //This "renderRows" help to us to render specific 'UserRow' component display on table.
  renderRows() {

    const {requisitionList, VisitDetails, visitId, getVisitDetails} = this.props;
    if(this.props.requisitionList.length>0)
    {
      const requisitionCollection =requisitionList.map((props, i) =>
     
        <TableRow   onDoubleClick={() => this.openRequisitionDetail(props.PatientVisitId,props.PatientName,props.VisitSequenceId)} selected={props.selected}>
          <TableRowColumn className='accession-view__Id-column'>{props.VisitSequenceId}</TableRowColumn>
          <TableRowColumn className='accession-view__Visit-column'>{new Date(props.VisitDate).toLocaleDateString("en-US")}</TableRowColumn>
          <TableRowColumn className='accession-view__Visit-column'>{props.VisitTime}</TableRowColumn>
          <TableRowColumn>{props.PSCLocation}</TableRowColumn>
          <TableRowColumn>{props.PatientName}</TableRowColumn>
          <TableRowColumn className='accession-view__Gender-column'>{props.PatientSex}</TableRowColumn>
          <TableRowColumn className='accession-view__DOB-column'>{new Date(props.PatientDOB).toLocaleDateString("en-US")}</TableRowColumn>
          <TableRowColumn>{props.PhysicianName}</TableRowColumn>
          <TableRowColumn>{props.PhysicianLocation}</TableRowColumn>
          <TableRowColumn>{props.VisitStatus}</TableRowColumn>
          <TableRowColumn className='accession-view__Icon-column'></TableRowColumn>
          <TableRowColumn className='accession-view__Icon-column'> </TableRowColumn>
          <TableRowColumn className='accession-view__Icon-column'> </TableRowColumn>
          <TableRowColumn className='accession-view__Icon-column'> </TableRowColumn>
          <TableRowColumn > </TableRowColumn>
        </TableRow>
      )

    return requisitionCollection;
    }
    else
    {
      return(
      <div className='busy-indicator'>
              <div className='busy-indicator__spinner'>
                <CircularProgress size={40} thickness={5} />
              </div>
      </div>);
    }


  }



  //This function help to us when user click on header column get the current sortby,sortdir values..                              
  updateSortBy(sortBy) {

    if (this.state.sortDir === 'ASC') {

      this.state.sortDir = 'DESC';
    }
    else
      this.state.sortDir = 'ASC'

    //Get the current sortdirection on specific column.
    let sortDir = this.state.sortDir;

    //This property function we are making action redux and send api call.
    this.props.updateSortBy(sortBy, sortDir, this.state.page, this.state.pageSize);

    //Here we are setting new state of following state values.
    this.setState({ sortBy, sortDir });

  }

  /*This is the block to show the pagination of requisition list view all methods*/
  handleChange(event, index, pageSize) {

    //Caluculate the total no of records of requisition list..
    let totalNoOfRecords = this.props.totalCount;
    this.setState({ pageSize });
    this.setState({ totalPages: Math.ceil(totalNoOfRecords / pageSize) });


    //This property function we are making action redux and send api call.
    this.props.updateSortBy(this.state.sortBy, this.state.sortDir, this.state.page, pageSize);

  }

  onPageChange(page) {

    this.setState({ page });
    //This property function we are making action redux and send api call.
    this.props.updateSortBy(this.state.sortBy, this.state.sortDir, page, this.state.pageSize);

  }


  //This is main render of all table component to display the requisition list.
  render() {

    const {updateSortBy, handleChange, onPageChange, totalCount, getVisitDetails} = this.props;
    //Caluculate the total no of records of requisition list..
    let totalNoOfRecords = totalCount;
    let val = Math.ceil(totalNoOfRecords / this.state.pageSize);
    this.state.totalPages = val;

    return (

      <div className='full-height'>
        <h4 className='accession-heading'>Accession</h4>
        <div className='accession-view'>
          <Table>
            <TableHeader {...headerProps}>
              {this.renderHeaders()}
            </TableHeader>

            <TableBody displayRowCheckbox={false} 
              deselectOnClickaway={false}>
              {this.renderRows()}
            </TableBody>
            <TableFooter>
              <TableRow>
                <TableRowColumn>
                  <div>
                    <div className='flt-lt'>
                      <p htmlFor="pageSizes" className='paging-text' >
                        Page size:
                        </p>
                      <SelectField style={{width:80,margin:-5}}
                        hintText="Please select"
                        value={this.state.pageSize}
                        onChange={this.handleChange} >

                        {/*<MenuItem value={null} primaryText="" />*/}
                        
                        <MenuItem value={5} primaryText="5" />
                        <MenuItem value={10} primaryText="10" />
                        <MenuItem value={20} primaryText="20" />
                        <MenuItem value={50} primaryText="50" />
                      </SelectField>
                    </div>

                  </div>
                  <div className='pagediv'>
                    <UltimatePagination
                      currentPage={this.state.page}
                      totalPages={this.state.totalPages}
                      onChange={this.onPageChange}
                      />
                  </div>

                </TableRowColumn>
              </TableRow>
            </TableFooter>
          </Table>

        </div>

        <div>
        </div>
      </div>

    );
  }
}

//Here we are declaring the propertys of all requisition list items.
Requisition.propTypes = {
  requisitionList: React.PropTypes.arrayOf(
    React.PropTypes.shape({
      VisitSequenceId: React.PropTypes.number.isRequired,
      PatientName: React.PropTypes.string.isRequired,
      PhysicianName: React.PropTypes.string.isRequired,
      PSCLocation: React.PropTypes.string.isRequired,
      PatientSex: React.PropTypes.string.isRequired,
      PhysicianLocation: React.PropTypes.string.isRequired,
      VisitDate: React.PropTypes.string.isRequired,
      VisitTime: React.PropTypes.string.isRequired,
      PatientDOB: React.PropTypes.string.isRequired,
      VisitStatus: React.PropTypes.string.isRequired,
      PatientVisitId: React.PropTypes.string.isRequired,
      Visitid: React.PropTypes.string.isRequired,

    }).isRequired
  ),

  getVisitDetails: React.PropTypes.func.isRequired,
  updateSortBy: React.PropTypes.func.isRequired,
  sortBy: React.PropTypes.string,
  sortDir: React.PropTypes.string,
  pageSize: React.PropTypes.number,
  page: React.PropTypes.number,
  totalCount: React.PropTypes.number,
  totalPages: React.PropTypes.number,
};


export default Requisition;

//This function we are using to make the headercolumns of table with dynamic property values.
function SortableHeader(props) {

  let style = {
    cursor: "pointer",
    visibility: "visible",

  }
  let imgStyle = {
    visibility: "hidden",

  }
  let columnWidth = {
    with:"auto"
  }

  if (props.isSortColumn) {

    style.fontWeight = "bold";
    style.color = "black";
  }

  //Here we are specifying for icons on Tableheader specification.
  if (props.name != undefined && props.name != " ") {
    var value = '';
    switch (props.name) {

      case "Accession#": columnWidth.width = 85;
        break;
      case "Visit Date": columnWidth.width = 120;
        break;
        case "Visit Time": columnWidth.width = 120;
        break;
      case "Gender": columnWidth.width = 85;
        break;
      case "DOB": columnWidth.width = 120;
        break;
      case "NotesIcon": imgStyle.visibility = "visible"; style.visibility = "hidden"; columnWidth.width = 50;
        value = NotesIcon;
        break;
      case "AttachementIcon": imgStyle.visibility = "visible"; style.visibility = "hidden"; columnWidth.width = 50;
        value = AttachementIcon;
        break;
      case "NotificationIcon": imgStyle.visibility = "visible"; style.visibility = "hidden"; columnWidth.width = 50;
        value = NotificationIcon
        break;
      case "CriticalIcon": imgStyle.visibility = "visible"; style.visibility = "hidden"; columnWidth.width = 50;
        value = CriticalIcon;
        break;
      case "LabReviewIcon": imgStyle.visibility = "visible"; style.visibility = "hidden"; 
        value = LabReviewIcon;
        break;

      default: "" ; 

    }

  }

  //Finally we are rendering the Table headers here specifing all propertys.
  return (

    <TableHeaderColumn style={columnWidth} >
      <div style={style} onClick={() => props.onClicked()}>{props.name}</div>
      <img style={imgStyle} src={value} />

    </TableHeaderColumn>

  );
}








