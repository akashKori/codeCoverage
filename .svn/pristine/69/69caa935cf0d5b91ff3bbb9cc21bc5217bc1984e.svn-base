import homeReducer from '../../src/reducers/homeReducer'
import { applyMiddleware, compose, createStore } from 'redux'
import initailState  from '../../src/routes/Login/modules/loginReducer'
import * as loginAction from  '../../src/routes/Login/modules/loginAction'
import chai from 'chai'
import sinon from 'sinon'
import  { APIPATH } from '../../src/constant/common'

describe('testing store for login page ', ()=>{
const user = {username : 'Shuvam@gmail.com' , password : 'Stp@*mnq1', isLoggedIn :false}; 
const invalidUser = {username : 'sds' , password : 'sds', isLoggedIn :false}
const loginStore = createStore( initailState); 
    describe('testing for login Success functionality ', ()=>{
    describe('testing for Positive Scenario', ()=>{
    //crete state with home reduce and intial state of login 
    it('first check if store is an object type' , ()=>{
      chai.expect(typeof(loginStore)).equals('object');
    })
     ///checking for success login
     
     const loginSuccessObj = loginAction.loginSuccess(user);    
     loginStore.dispatch(loginSuccessObj);
     const actualStateSuccess = loginStore.getState();
     const expectedStateSuccess = { 
                            user: user, // passing user object
                            isUserLoggedIn: false
                            }

  //check for login if it called or not
  it('login success return type should be an object', ()=>{

    chai.expect(typeof(loginSuccessObj)).to.be.equal('object');
  })

  //check if return type has isuserlogged in property

  it('check if return object has isUserLoggedin Object', ()=>{
    chai.expect(loginSuccessObj).has.property('isUserLoggedIn');
  })

  //check if return object type value is Login_Success

  it('check if login success return object type property is equal to Login_Success', ()=>{

    chai.expect(loginSuccessObj.type).to.be.equal('LOGIN_SUCCESS');
  })


  it('check store for login success' , ()=>{
    chai.expect(expectedStateSuccess).to.deep.equals(actualStateSuccess)
  })

 
  describe('testing for negative scenario' , ()=>{
     const loginSuccessInvalid = loginAction.loginSuccess(invalidUser);    
     loginStore.dispatch(loginSuccessInvalid);
     const actualStateSuccess = loginStore.getState();
     const expectedStateSuccess = { 
                            user: user, // passing user object
                            isUserLoggedIn: false
                                 }
  })
  })
  })
  
  describe('testing for Login Fail functionality' , ()=>{
     
     const loginFailObj = loginAction.loginFailure(invalidUser)  
     loginStore.dispatch(loginFailObj);     
     const expectedSateFailed = loginStore.getState();
     const actualStateFailed = {
      user: user, // passing user object
      isUserLoggedIn: false, // setting and  passing isUserLoggedIn as user loged in
     }
    //check for login if it called or not
    it('login failed return type should be an object', ()=>{
      chai.expect(typeof(loginFailObj)).to.be.equal('object');
    })
    
    //check if return object type value is Login_Success

    it('check if login success return object type property is equal to Login_Success', ()=>{

      chai.expect(loginFailObj.type).to.be.equal('LOGIN_FAILURE');
    })     
 
     it('testing for login failed ', ()=>{
     chai.expect(expectedSateFailed).to.deep.equal(actualStateFailed)
     })
   }) 


/*==================Mock test using sinon and sinon-chai ================*/


//----- check whethere create Login is calling or not ----//
describe('mock test for login page by spy ',()=>{
it('should call create Login once by spy', function() {

  var Login ={
     createLogin : function(user) { loginAction.createLogin(user) }
  };
  
   var createLoginSpy= sinon.spy(Login, 'createLogin');
   Login.createLogin(user);
   sinon.assert.calledOnce(createLoginSpy);
   createLoginSpy.restore();
});

//check for login success for correct user object
it('should call Login Success for current user object', ()=>{

  var loginSuccess = {
    success : function (user){
      loginAction.createLogin(user);
    }
  }
  var loginSuccessSpy = sinon.spy(loginSuccess, 'success');
  loginSuccess.success(user);
  sinon.assert.calledOnce(loginSuccessSpy);
  loginSuccessSpy.restore();
})

//check for login fail for incorrect user object 

it('should call once if user object is incorrect', ()=>{

  var loginFailed = {
    failed : function (user){
      loginAction.createLogin(user);
    }
  }
  var loginFailedSpy = sinon.spy(loginFailed, 'failed')
  loginFailed.failed(invalidUser);
  sinon.assert.calledOnce(loginFailedSpy);
  loginFailedSpy.restore();
})
it('should send correct parameters to the expected URL', function() {

    //We'll stub $.post same as before
    var get = sinon.stub($, 'GET');

    //We'll set up some variables to contain the expected results
    var expectedUrl = APIPATH + 'Account/Login?'
    
    loginAction.createLogin(user);
    post.restore();

    sinon.assert.calledWith(get, expectedUrl, user);
  });

})


//=============checking for reducer ====================//

describe('checking for login reducer is pure function', ()=>{

  it('testing login reducer is pure function or not' , ()=>{
    chai.expect(typeof(initailState)).to.be.equals('function');
  })

  it('testing home reducer is pure function or not' , ()=>{
    chai.expect(typeof(homeReducer)).to.be.equals('function');
  })

  it('Should return if no state is undefined and there is not action.', () => {
      let state = initailState(undefined, {})
      expect(state).to.equal({user : {}, isUserLoggedIn :false})      
    })

  it('should return if state is there but action is undefined or incorrect', ()=>{
     let state = initailState({}, { type: 'Wrong_Type' })
      expect(state).to.equal({})     
     
  })

  it('should return state of success if action is Login_success', ()=>{
     
     let succcessState = initailState(user, 'LOGIN_SUCCESS');
     let expectedSuccState = {
       user : user
     }
     expect(succcessState).to.be.deep.equals(expectedSuccState);     
  })    
})

  // describe('testing for Log out functioanlity' ,()=>{
  //  //check for log out     
  
  //    const logoutObj = loginAction.createLogout(user);
  //    loginStore.dispatch(logoutObj);
  //    const logoutState = loginStore.getState();
  //    const actualLogOutState = {      
  //      user:user,
  //     isUserLoggedIn: false
  //    }
  //   it('checke store for log out ', ()=>{
  //    chai.expect(logoutState).deep.equal(actualLogOutState);
  //  })
  //  //check for login if it called or not
  //   it('login failed return type should be an object', ()=>{
  //     chai.expect(typeof(logoutState)).to.be.equal('object');
  //   })
    
  //   //check if return object type value is CreateLogout

  //   it('check if login success return object type property is equal to Login_Success', ()=>{

  //     chai.expect(logoutState.type).to.be.equal('CREATE_LOGOUT');
  //   })
     
  // });
   
})